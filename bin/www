#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('twitch-extension-demo:server');
var http = require('http');
var fs = require('fs');
var https = require('https');

var EXTENSION_CLIENT_ID = "s72s2j2mm94920a4hk4921e5vc67ks";
var EXTENSION_SECRET_KEY = "Y1iFd/Fdgar5gcWT70/kRbkTQsr1MC4l1e5YE6ZLJJE=";
var DEVELOPER_USER_ID = 154139682;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9999');
app.set('port', port);

/**
 * Create HTTPS server.
 */

let options = {
 key  : fs.readFileSync('certs/server.key'),
 cert : fs.readFileSync('certs/server.crt')
};

var server = https.createServer(options, app);

// TWITCH SOCKETS
var ext_sockets = require('../custom_modules/extension_sockets');
ext_sockets.io.listen(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, () => {
  console.log("twitch_extension_demo backend running on HTTPS @ localhost:" + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
